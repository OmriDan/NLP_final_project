question_type,question_text,answer_text,difficulty,loss
open question,"Given array A split into k sorted blocks of size n/k, prove a comparison lower bound for sorting A.",Ω(n log k) using comparison tree of (k!)^(n/k) leaves.,0.134902992,5.11328125
open question,"Add GetQ(i,b) that returns ∑(ak + b)^2 for k = 1..i in O(log n).","Keep two BSTs tracking sum and square sum. Q(i,b) = sum_sq + 2b*sum + b^2*i",0.293545107,4.2890625
open question,Explain the derivation of collision bounds in perfect hashing from lecture slide.,"Equality from combinatorics, collision count definition, and max collision bound per chosen function.",0.593735659,6.0859375
open question,Add operation SearchPartialSum(x): return i such that prefix sum equals x. Must be O(log n).,Traverse BST by comparing cumulative left sum + node value to x. Standard balanced BST logic applies.,0.712085976,6.30859375
open question,Find min and max number of leaves in a binomial heap and a Fibonacci heap with n nodes.,"Binomial: min = 1, max = 2^{k−1}; Fibonacci: min = 1, max = n",0.351392433,2.140625
open question,Can balance factor alone be maintained correctly during insert/delete without hurting time complexity?,Yes. Balance factor updates alone suffice to decide when rebalancing is needed.,1.0,5.3125
open question,"Implement Insert, Delete, Find, and DistSum(k) = sum of distances from all keys less than k to k.",Use augmented BST with sum/rank tracking. Time for all operations: O(log n).,0.254934184,5.140625
open question,Use Selection algorithm with 9-element groups instead of 5. What is the minimal i such that selecting the i-th smallest in each group yields linear time?,i = 5. Recurrence: T(n) = T(n/9) + T(15n/18) + O(n) ⇒ T(n) = Θ(n),0.385185397,2.876953125
open question,Analyze the amortized change in potential T1-T0 during DeleteMin in Lazy Binomial Heap. Provide tight bounds.,Lower bound: 1 - n; Upper bound: log₂(n) - 1,0.430169591,2.71875
open question,Can we skip marking DELETED in open addressing if key k hashes to i and key i+1 to i?,No. A later key might still need to probe through that position.,0.134715722,5.6328125
open question,"Can you sort an array of n elements, each at most log n indices from its final position, in o(n log n) time?",Yes. Use a data structure like a finger tree or min-heap to sort in o(n log n) expected time.,0.414985252,3.384765625
open question,Give tight lower and upper bounds on the rank of the root of an AVL tree of height h.,Lower: |Fₕ₋₂| + 1 = (Φ^{h+1} - Φ̅^{h+1})/√5; Upper: 2^h,0.346554214,3.833984375
open question,"Analyze time complexity of Insert, DeleteMin, and Build-Heap in a d-ary heap.","Insert: Θ(log₍d₎n), DeleteMin: Θ(d log₍d₎n), BuildHeap: Θ(n)",0.297462671,3.515625
open question,"How many bits are needed to represent a hash function h: U → {0, 1, ..., m−1}? Afther that, What's the expected time to build a 2-level perfect hash table for n elements?","logm^u = |u| * logm. After that, Expected O(n) over random choices of universal hash functions",0.544812559,5.17578125
open question,"Design a data structure over B = {1,2,4,...,2^n} supporting build, delete, num, max with listed complexities.",Use count array and doubly linked list for active keys. All operations meet their time bounds.,0.56856729,5.2421875
open question,"Design data structure supporting Init(a1...an), SetValue(i,x), GetPartialSum(i) in O(log n).",Augmented balanced BST with sum field. Init via postorder traversal. SetValue and GetPartialSum follow search path.,0.542021862,5.54296875
open question,"Design data structure to maintain 2D points and support Insert and DomDiff(a,b) in O(log n).",Use two BSTs sorted by x and y. Use rank queries and count differences in quadrants.,0.689441431,4.8125
open question,Propose modifications to an AVL tree to support finding the k closest keys to a given node x in O(k) time.,Add pointers to in-order successor/predecessor. Traverse both directions simultaneously. Insert/update pointers in O(log n).,0.616110863,5.05859375
open question,"Design a static product pricing system with Init, Select(k), Rank(x) in O(n), O(1), O(1) respectively. After that, Extend previous system to support Insert(x,p), Delete(x), Select(k), Rank(x) in O(log n). Init in O(n).","Use counting sort during Init. Maintain array of products sorted by price. Use pointer math or indexing. After sorting in Init, use a balanced BST to support all operations in O(log n).",0.579328821,4.77734375
open question,"In a BST with n nodes, is the amortized time for k successor operations starting from min always O(1)?",Yes. In total O(k) time for k successors from minimum node.,0.543065609,4.0546875
open question,"Make all operations from part A worst-case O(1), except Insert (amortized O(log n)).",Use lazy updates: defer Delete and DecreaseKey to next Insert/Min. Use a log-sized list to track updates.,0.986340238,5.828125
open question,"Describe an algorithm that splits a binary min-heap into three heaps of smallest, middle, and largest third of elements.","Use median-of-medians to partition, then build heaps. Total time: O(n).",0.411695072,4.1171875
open question,Can a sequence of n integers with only ⌊log7 n⌋ distinct values be sorted in expected O(n) time?,Yes. Use hash table for counts and then sort keys; total expected O(n).,0.358800625,4.6015625
open question,"Can array A be sorted in linear time in each of the following cases: (a) has 2n inversions, (b) even indices are smaller half in sorted order?","Case a: Yes, using finger tree with insertion sort. Case b: No, would violate comparison sort lower bound.",0.363128888,4.63671875
open question,"Given a sequence with each ai being the median of a1...ai, can we build an AVL tree in O(n)?",Yes. Use the known structure to build a sorted array then construct AVL.,0.80125851,4.1953125
open question,Design algorithm (expected linear time) and worst-case linear time algorithm to detect: ∃ a1 ≠ a2 such that a1/a2 = n2/n1.,Use hashing: a1 * n1 = a2 * n2. Store ai * ni in hash. Use counting sort and scanning for deterministic version.,0.444890323,4.5703125
open question,"Fill in tightest asymptotic bounds for operations on (2,4) tree using bottom-up strategy.",All are O(m) except down-moves which are O(m log m).,0.708606774,4.26171875
open question,"For constant c < 1, show that the smallest ⌊n/c⌋ elements of an array can be sorted in O(n) time.","Use Select to partition, then sort smallest ⌊n/c⌋ elements using O(n log(n/c)) = O(n) algorithm.",0.84058624,3.099609375
Multiple Choice,How many probe sequences are possible for each open addressing strategy?,D,0.694981316,5.42578125
open question,Analyze runtime for selection algorithm using groups of 7 and using the 2nd smallest in each group as pivot.,T(n) = T(n/7) + T(6n/7) + Θ(n) = Θ(n log n),0.218642185,2.564453125
open question,"Support Insert, Delete(x), DecreaseKey(x, k), and Min in a structure with amortized complexities: Insert: O(log n), others: O(1).",Use Fibonacci heap. Charge Insert with O(log n) to cover future operations.,0.691059864,5.6171875
open question,Does storing balance factor instead of height in AVL tree nodes save memory?,"Yes. Uses O(n) vs O(n log log n) bits asymptotically, so saves memory.",0.87132023,4.17578125
open question,Is it possible to compute the number of inversions I(A) in O(n log n) time? Can we sort A with I(A) ≤ n(n/2) in O(n)?,Yes to first (augmented BST). No to second — reduction from sorting shows contradiction to lower bound.,0.697495684,6.2578125
open question,"Give a non-constant function f(n) such that f(n) = Θ(f(n log n)). After that, Give a non-constant function f(n) such that f(n) = Θ(f(2n)).","f(n) = log n, f(n) = log* n",0.630015254,3.482421875
open question,"Design a graph data structure supporting Init(A), AddEdge(i,j), DeleteVertex(i), and MaxNeighborhood() efficiently.",Use adjacency lists and max-heap keyed by value + sum of neighbors. Maintain pointers and update values on edge/vertex change.,0.364890313,4.91015625
open question,"Design a data structure with amortized complexities: Insert(x): O(1), DeleteMin(): O(log n), DecreaseKey(x, Δ): O(1), Print100(): O(1).","Use Fibonacci heap + sorted array for 100 smallest elements, updated lazily.",0.455831815,4.9140625
open question,"Give an example of a function f(n) such that f(n) = O(n^2), f(n) = Ω(n), f(n) ≠ o(n^2), and f(n) ≠ ω(n).","f(n) = n if n is odd, f(n) = n^2 if n is even. Satisfies all conditions.",0.340499676,1.990234375
open question,"Design data structure to maintain course grades with Insert, DeleteGrade, DeleteCourse, and CourseSelect(i).",Use AVL trees for course and score tracking. Select by average using augmented tree.,0.341109151,5.4375
Multiple Choice,"Inserting sorted vs reverse-sorted values into a (2,4) B-tree — what changes?",D,0.506858047,4.05859375
open question,"Design a data structure supporting INSERT(x,y), DELETE(p), MIN(x), MOVE_ALL(x1,x2), LAST() in amortized O(log n).","Use array of Fibonacci heaps by x-value, with separate min and timestamp heaps.",0.311643496,6.36328125
open question,Extend Union-Find with Print(x) that prints all elements in x's set in time proportional to its size.,Maintain circular linked list for each set. Print walks this list. No impact on amortized Find/Union time.,0.526450087,5.94921875
open question,"Sort array by frequency assuming all frequencies are powers of 2, in linear time.","Find most frequent in linear time, recurse on remainder. Recurrence: T(n) = T(n/2) + O(n) = O(n)",0.649839579,3.509765625
open question,Solve the recurrence T(n) = 3T(n/3) + n log n asymptotically.,T(n) = Θ(n log² n),0.658004879,3.32421875
Multiple Choice,"In an AVL tree with n nodes, what is the tightest upper bound on the difference in size between the left and right subtrees of the root?",C,0.674698338,4.53125
open question,"In a B-tree of minimal degree d, a key is deleted and tree height decreases. Determine d and how much the height decreased.","d = 2, and the height decreased by 1 (root with one key was deleted).",0.428216404,2.494140625
open question,"Design a randomized algorithm to find 4 elements in A that sum to 0, in expected O(n^2) time.","Use hash table to map pair sums to index pairs, then check complementary sums. Total expected time: O(n^2).",0.752596598,3.509765625
open question,Find all elements in an array of size n that appear at least n/7 times in O(n) time.,"Use 7 Select calls for i=n/7, 2n/7,... and count candidates. Total time: O(n)",0.437061201,4.4765625
open question,"Given f1(n) = O(g1(n)) and f2(n) = O(g2(n)), is f1(f2(n)) = O(g1(g2(n)))? Prove or disprove.",Disproved with counterexample: f1(f2(n)) may grow faster than g1(g2(n)).,0.728344449,3.099609375
Multiple Choice,"In 2-level hashing, what's the tightest bound on the size of the largest secondary table?",C,0.414985252,5.65625
open question,"Design data structure for lines y = ax + b supporting insert and search if they intersect on x ∈ [0,1], in O(log n).","Use AVL tree keyed by y at x=0, compare adjacent lines at x=1 for intersection check before insert.",0.839360055,4.6875
open question,"Given T(n) = T(n/2) + f(n), T(1)=2, is there an f(n) such that T(n) = Θ(log n)?","Yes. For example, f(n) = log n.",1.0,3.03125
open question,Find the minimal number of insertions to a B-tree with degree d to split the root of a tree with n nodes and height h.,Number of insertions: d^{h+1}. Each level needs d insertions to propagate split upward.,0.630192748,4.52734375
open question,"Given matrix with sorted rows, print all elements in sorted order using O(m) extra space and O(n log m) time.",Use a min-heap of column heads. Repeatedly extract min and insert next in row. Total time O(n log m).,0.177457061,4.2265625
open question,"Design data structure with amortized complexities: Insert(x): O(1), DeleteMin(): O(log n), DecreaseKey: O(1), Print100: O(1).",Use Fibonacci heap + sorted array for smallest 100. Rebuild when needed.,0.510767206,5.48046875
open question,Explain why Pr[i compares with j | k is chosen pivot] = 2 / (j - i + 1) in random quicksort.,Because the probability that either i or j is the first to be chosen as pivot among i to j is 2/(j-i+1).,0.389867217,2.685546875
open question,"Design a data structure managing axis-aligned rectangles with Add(a,b,c,d), Split(p,z), Left(z), Max_area() in required complexities.","Use AVL tree keyed by (a,b,c,d), with max_area field at each node. All ops O(log n), Max_area in O(1).",0.184065608,3.88671875
